#!/usr/bin/env python
PACKAGE = "strategy"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

## Game Start or not
gen.add("game_start",   bool_t,   0, "Game Start or not",  False)

## Select Game State
level_enum = gen.enum([ gen.const("Level1",     str_t, "Level1",     "Level1"),
                        gen.const("Level2",     str_t, "Level2",     "Level2"),
                        gen.const("Level3",     str_t, "Level3",     "Level3"),
                        gen.const("Level4",     str_t, "Level4",     "Level4")],
                        "An enum to set Passing Level")
gen.add("level", str_t, 0, "Select Level before passing challenge started", "Level1", edit_method=level_enum)

## Passing power
gen.add("passing_power",   int_t, 0, "Passing power value", 80, 0, 100)

## Using orbit
gen.add("using_orbit",    bool_t,   0, "Using orbit method",   False)

## Targets using vision
gen.add("target_vision_red",    bool_t,   0, "Looking red",    False)
gen.add("target_vision_yellow", bool_t,   0, "Looking yellow", False)
gen.add("target_vision_blue",   bool_t,   0, "Looking blue",   False)
gen.add("target_vision_white",  bool_t,   0, "Looking white",  False)

## Padding distance
gen.add("padding_ball",   int_t, 0, "Padding distance with ball", 35, 0, 150)
gen.add("padding_target", int_t, 0, "Padding distance with target", 100, 0, 150)

## Select Strategy Mode
side_enum = gen.enum([ gen.const("Defense", str_t, "Defense", "Defense"),
                       gen.const("Attack",  str_t, "Attack",  "Attack")],
                     "An enum to set Strategy Mode")
gen.add("strategy_mode", str_t, 0, "A side parameter which is edited via an enum", "Defense", edit_method=side_enum)

## Orbit_shoot angle
gen.add("orb_attack_ang", double_t,  0, "Condition of shootale ang", 10, 0, 20)

## Robot Speed
gen.add("minimum_w", double_t,   0, "minimum speed of angular velocity",  0.2, 0, 5)
gen.add("maximum_w", double_t,   0, "Maximum speed of angular velocity",  50, 10, 100)
# gen.add("kp_w", double_t,   0, "Kp value of angular velocity",  0.4, 0, 1)
# gen.add("ki_w", double_t,   0, "Ki value of angular velocity",  0, 0, 1)
# gen.add("kd_w", double_t,   0, "Kd value of angular velocity",  0, 0, 1)

gen.add("minimum_v", double_t,   0, "minimum speed of velocity",  0.2, 0, 5)
gen.add("maximum_v", double_t,   0, "Maximum speed of velocity",  60, 10, 100)
# gen.add("kp_v", double_t,   0, "Kp value of velocity",  0.4, 0, 1)
# gen.add("ki_v", double_t,   0, "Ki value of velocity",  0, 0, 1)
# gen.add("kd_v", double_t,   0, "Kd value of velocity",  0, 0, 1)

## Strategy Configs
gen.add("ballhandle_dis", int_t,   0, "Condition of Handleing ball", 28, 0, 50)
gen.add("ballhandle_ang", int_t,   0, "Condition of Handleing ball", 5, 0, 50)

## Balls and Targets point config
gen.add("adjust_ball1_x", int_t, 0, "Ball 1 point", 0, -10, 10)
gen.add("adjust_ball1_y", int_t, 0, "Ball 1 point", 0, -10, 10)
gen.add("adjust_ball2_x", int_t, 0, "Ball 2 point", 0, -10, 10)
gen.add("adjust_ball2_y", int_t, 0, "Ball 2 point", 0, -10, 10)
gen.add("adjust_ball3_x", int_t, 0, "Ball 3 point", 0, -10, 10)
gen.add("adjust_ball3_y", int_t, 0, "Ball 3 point", 0, -10, 10)
gen.add("adjust_ball4_x", int_t, 0, "Ball 4 point", 0, -10, 10)
gen.add("adjust_ball4_y", int_t, 0, "Ball 4 point", 0, -10, 10)
gen.add("adjust_target1_x", int_t, 0, "Target 1 point", 0, -10, 10)
gen.add("adjust_target1_y", int_t, 0, "Target 1 point", 0, -10, 10)
gen.add("adjust_target2_x", int_t, 0, "Target 2 point", 0, -10, 10)
gen.add("adjust_target2_y", int_t, 0, "Target 2 point", 0, -10, 10)
gen.add("adjust_target3_x", int_t, 0, "Target 3 point", 0, -10, 10)
gen.add("adjust_target3_y", int_t, 0, "Target 3 point", 0, -10, 10)
gen.add("adjust_target4_x", int_t, 0, "Target 4 point", 0, -10, 10)
gen.add("adjust_target4_y", int_t, 0, "Target 4 point", 0, -10, 10)

exit(gen.generate(PACKAGE, "strategy", "Passing"))